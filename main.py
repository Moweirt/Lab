import pandas as pd
import streamlit as st
import numpy as np
from matplotlib import pyplot as plt
from matplotlib.animation import FuncAnimation

#Описание лабораторной работы(теория + картинки + формулы)

st.title("Интерактивная лабораторная работа по изучению затухающих колебаний и жидкого трения")

st.header("Идея эксперимента")
st.markdown("Изучение свойств собственных колебаний системы, представляющей собой подвешенный на пружине груз, "
            "который движется в вязкой среде. В нашем эксперименте определяется декремент затухания и коэффициент "
            "силы трения (сопротивления), действующий на груз со стороны вязкой среды.")

st.header("Теория")
st.markdown("Колебания широко распространены в природе. В общем случае **_под колебаниями понимают повторяющийся в той "
            "или иной степени во времени процесс изменения состояний системы около точки равновесия_**."
            "По физической природе колебательные процессы разделяют на механические, электромагнитные, "
            "электромеханические и т.д. Особую роль в физике играют механические и электромагнитные колебания. "
            "С помощью распространяющихся колебаний плотности и давления воздуха (воспринимаемых как звук) и с помощью "
            "распространяющихся электромагнитных колебаний (свет) мы получаем большую часть информации об окружающем мире.")

st.markdown("Несмотря на различную физическую природу колебаний, все они обладают некоторой общей сущностью, "
            "которая в первую очередь определяется возможностью их единообразного математического описания.")

st.markdown("Все колебания могут быть разбиты на три группы: периодические, квазипериодические, непериодические."
            "Периодическими колебаниями мы называем те процессы, которые повторяются во времени и описываются такой "
            "функцией времени, что f(t) = f(t + T), где **_Т — период данного колебания_**. Квазипериодическими колебаниями "
            "называются такие непериодические колебания, которые в течение длительного времени сохраняют основные "
            "характеристики процесса при медленном изменении их параметров (например, амплитуды)")

st.markdown("Если уравнения, описывающие колебания, имеют вид линейных дифференциальных уравнений, колебания "
            "называются линейными. Физически это соответствуют тем случаям, когда в системе все возникающие силы "
            "можно считать линейными функциями координат и скоростей.")

st.markdown("Колебательный процесс в системе может возникнуть в двух случаях. В первом из них за счет внешней силы "
            "система выводится из состояния устойчивого равновесия, т.е. ей сообщается некоторое достаточное количество "
            "потенциальной или кинетической энергии, после чего внешние силы полностью отключаются. Тогда, за счет работы "
            "внутренних сил, образующихся в системе, происходит переход кинетической энергии в потенциальную и наоборот. "
            "В этом случае возникают колебания, которые называются свободными или собственными колебаниями системы. "
            "Если же на систему постоянно действует внешняя сила, то возникают так называемые вынужденные колебания")

st.markdown("Если физическая величина x(t) изменяется со временем по гармоническому закону, то колебания "
            "называются гармоническими. Формула гармонических колебаний:")

st.latex("х(t) = A cos(ω0t + φ0)")

st.markdown("Здесь A — амплитуда колебаний; ω0 — круговая частота; t — время; φ0 — начальная фаза колебаний.")

st.markdown("Круговая частота ω0 связана с периодом:")

st.markdown("")

st.markdown("")

st.markdown("")

st.markdown("")

#Предлагаем пользователю проверить, как усвоился материал

#Упражнение1

st.subheader("Упражнение №1")
st.markdown(" **_ЗАДАНИЕ_**: Меняя один из параметров системы и изучая изменения графика, определите, как они влияют на её харатеристики")

# Создаем кнопки для изменения параметров и считываем их показатели

par1_columns = st.columns(2)
par_rig = par1_columns[0].number_input("Жесткость пружины(H/m)", value=40)
par_mass = par1_columns[1].number_input("Масса груза(kg)", value=0.1)

par2_columns = st.columns(2)
par_rad = par2_columns[0].number_input("Радиус шарика(m)", value=0.01)
par_vis = par2_columns[1].number_input("Динамическая вязкость жидкости(P/s)", value=0.9)

st.info("Для удобства вы также можете изменить частоту кадров анимации")

par3_columns = st.columns(1)
par_ff = par3_columns[0].number_input("Частота кадров(FPS)", value=4)

m = par_mass
r = par_rad
k = par_rig
y = par_vis
s = par_ff

#Строим измененный график по считанным показателям

plt.style.use('seaborn-pastel')

fig = plt.figure()
ax = plt.axes(xlim=(0, 4), ylim=(-3 , 3))
line, = ax.plot([], [], lw=1)

w0 = np.sqrt(k/m)
h = 6 * np.pi * r * y
v = h/(m*2)
w = w0/10

def init():
    line.set_data([], [])
    return line,

def animate(i):
    x = np.linspace(0, 4, 1000)
    y = np.exp(-v * x) * np.sin( 2 * np.pi * w * (x - 0.01 * i * s ) )
    line.set_data(x, y)
    return line,

anim = FuncAnimation(fig, animate, init_func=init,
                     frames=200, interval=20, blit=True)

anim.save('animation.gif', writer='pillow')

st.image("animation.gif")

#Проверяем как пользователь определил закономерности

st.markdown("##### Укажите, как изменяются характеристики системы при увеличении параметра:")
ch_mass = st.multiselect("Влияние массы на систему", ["Увеличивает период", "Уменьшает период", "Не влияет на период", "Увеличивает амплитуду", "Уменьшает амплитуду", "Не влияет на амплитуду"])
ch_rad = st.multiselect("Влияние радиуса шарика на систему", ["Увеличивает период", "Уменьшает период", "Не влияет на период", "Увеличивает амплитуду", "Уменьшает амплитуду", "Не влияет на амплитуду"])
ch_rig = st.multiselect("Влияние жесткости пружины на систему", ["Увеличивает период", "Уменьшает период", "Не влияет на период", "Увеличивает амплитуду", "Уменьшает амплитуду", "Не влияет на амплитуду"])
ch_vis = st.multiselect("Влияние динамической вязкости жидкости на систему", ["Увеличивает период", "Уменьшает период", "Не влияет на период", "Увеличивает амплитуду", "Уменьшает амплитуду", "Не влияет на амплитуду"])

resp = 0

for i in ch_mass:
    if (i == "Увеличивает период" or i == "Не влияет на амплитуду"): resp += 1
for i in ch_rad:
    if (i == "Не влияет на период" or i == "Уменьшает амплитуду"): resp += 1
for i in ch_rig:
    if (i == "Уменьшает период" or i == "Не влияет на амплитуду"): resp += 1
for i in ch_vis:
    if (i == "Не влияет на период" or i == "Уменьшает амплитуду"): resp += 1
if (resp > 0 and resp <= 3):
    st.error(f"Есть ошибки (+ {resp/2} балл(а))")
elif(resp >= 4 and resp < 7):
    st.warning(f"Вы неплохо справились (+ {resp/2} балла)")
elif (resp == 7):
    st.success(f"Почти всё верно! Отлично!(+ {resp/2} балла)")
elif (resp == 8):
    st.success(f"Абсолютно верно! Вы молодец!(+ {resp/2} балла)")